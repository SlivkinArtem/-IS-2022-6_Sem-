from fastapi import FastAPI, Depends, HTTPException, Form, Request
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, JSONResponse, StreamingResponse
from starlette.middleware.sessions import SessionMiddleware
from passlib.context import CryptContext
from pydantic import BaseModel
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import FAISS
from langchain_openai import OpenAIEmbeddings
from langchain.docstore.document import Document
from openai import OpenAI
import os
from dotenv import load_dotenv
from models import User
from db import SessionLocal
from models import LikedText
import asyncio
import time  
import json
from typing import Optional
from datetime import datetime, timedelta
import jwt

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
openai_key = os.getenv("OPENAI_API_KEY")

if not openai_key:
    raise ValueError("‚ùå API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª!")

print(f"‚úÖ API-–∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: {openai_key[:5]}...")

# –°–æ–∑–¥–∞–µ–º –û–î–ò–ù —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI
app = FastAPI(
    title="–†—ç–ø –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä API",
    description="API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤ —Ä—ç–ø-–ø–µ—Å–µ–Ω –≤ —Å—Ç–∏–ª–µ –°–ª–∞–≤—ã –ö–ü–°–° —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GPT-4",
    version="1.0.0",
    docs_url="/docs",  
    redoc_url="/redoc", 
    openapi_tags=[
        {
            "name": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤",
            "description": "–û–ø–µ—Ä–∞—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–æ–≤ —Ä—ç–ø–∞",
        },
        {
            "name": "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        },
        {
            "name": "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
            "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏",
        },
    ] 
)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://127.0.0.1:5500", "http://localhost:5500", "*"],  
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°–µ—Å—Å–∏–∏ cookies - –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º –∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º—É —ç–∫–∑–µ–º–ø–ª—è—Ä—É app
app.add_middleware(SessionMiddleware, secret_key="supersecretkey")
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Å–µ–Ω
INDEX_PATH = "faiss_index"
with open("all_songs.txt", "r", encoding="utf-8") as f:
    raw_text = f.read()

songs = [song.strip() for song in raw_text.split("\n\n") if song.strip()]
print(f"üéµ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(songs)} –ø–µ—Å–µ–Ω!")

client = OpenAI(
    api_key=openai_key,
    base_url="https://api.vsegpt.ru/v1",
)

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
SECRET_KEY = "Very very secret key"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30
REFRESH_TOKEN_EXPIRE_DAYS = 7

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token", auto_error=False)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class TokenData(BaseModel):
    username: Optional[str] = None
    token_type: str

class Token(BaseModel):
    access_token: str
    token_type: str
    refresh_token: str

class RequestModel(BaseModel):
    prompt: str

class LikeTextRequest(BaseModel):
    text: str

def load_or_create_index(texts, index_path):
    if os.path.exists(index_path):
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π FAISS-–∏–Ω–¥–µ–∫—Å...")
        embedding_model = OpenAIEmbeddings(
            model="text-embedding-3-small",
            openai_api_key=openai_key,
            openai_api_base="https://api.vsegpt.ru/v1",
        )
        db = FAISS.load_local(index_path, embedding_model, allow_dangerous_deserialization=True)
    else:
        print("üöÄ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π FAISS-–∏–Ω–¥–µ–∫—Å...")
        splitter = RecursiveCharacterTextSplitter(separators=['\n\n', '\n', ' '], chunk_size=128, chunk_overlap=64)
        source_chunks = [
            Document(page_content=chunk, metadata={'chunkID': i})
            for i, chunk in enumerate(splitter.split_text("\n\n".join(texts)))
        ]
        if source_chunks:
            embedding_model = OpenAIEmbeddings(
                model="text-embedding-3-small",
                openai_api_key=openai_key,
                openai_api_base="https://api.vsegpt.ru/v1",
            )
            db = FAISS.from_documents(source_chunks, embedding_model)
            db.save_local(index_path)
            print("FAISS-–∏–Ω–¥–µ–∫—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    return db

knowledge_base_index = load_or_create_index(songs, INDEX_PATH)

def create_token(data: dict, expires_delta: timedelta):
    to_encode = data.copy()
    expire = datetime.utcnow() + expires_delta
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
def generate_song(prompt: str):
    try:
        docs = knowledge_base_index.similarity_search(prompt, k=3) if knowledge_base_index else []
        similar_texts = [doc.page_content for doc in docs] if docs else ["–ë–∞–∑–∞ –ø—É—Å—Ç–∞, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –∫—É–ø–ª–µ—Ç!"]

        context = "\n".join(similar_texts)
        messages = [
            {"role": "system", "content": "–¢—ã —Ä—ç–ø–µ—Ä –°–ª–∞–≤–∞ –ö–ü–°–°. –ü–∏—à–∏ —Ä–µ–ø –≤ –µ–≥–æ —Å—Ç–∏–ª–µ, –≤–∞–∂–Ω–æ —á—Ç–æ–±—ã –±—ã–ª–∏ —Ä–∏—Ñ–º—ã, —Ç.–µ –Ω–µ –±—ã–ª–æ —Å—Ç—Ä–æ—á–µ–∫ –±–µ–∑ —Ä–∏—Ñ–º"},
            {"role": "user", "content": f"–í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–æ–∫:\n{context}\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ–¥–æ–ª–∂–∏: {prompt}"}
        ]

        completion = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=messages,
            temperature=0.8
        )

        return completion.choices[0].message.content
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –ú–∞—Ä—à—Ä—É—Ç—ã
@app.get("/")
async def serve_frontend():
    return FileResponse("static/index.html")

@app.post("/token", response_model=Token, tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–≤–∞–≥–µ—Ä–µ).
    """
    try:
        db = SessionLocal()
        user = db.query(User).filter(User.username == form_data.username).first()
        
        if not user or not pwd_context.verify(form_data.password, user.hashed_password):
            raise HTTPException(
                status_code=401,
                detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
                headers={"WWW-Authenticate": "Bearer"},
            )
        
        # access token
        access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
        access_token = create_token(
            data={"sub": user.username, "type": "access"}, 
            expires_delta=access_token_expires
        )
        
        # refresh token
        refresh_token_expires = timedelta(days=REFRESH_TOKEN_EXPIRE_DAYS)
        refresh_token = create_token(
            data={"sub": user.username, "type": "refresh"}, 
            expires_delta=refresh_token_expires
        )
        
        db.close()
        
        return {
            "access_token": access_token, 
            "token_type": "bearer",
            "refresh_token": refresh_token
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ç–æ–∫–µ–Ω-—ç–Ω–¥–ø–æ–∏–Ω—Ç–µ: {str(e)}")
        raise

@app.post("/refresh", response_model=Token, tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
async def refresh_access_token(refresh_token: str):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access token —Å –ø–æ–º–æ—â—å—é refresh token.
    """
    try:
        payload = jwt.decode(refresh_token, SECRET_KEY, algorithms=[ALGORITHM])
        username = payload.get("sub")
        token_type = payload.get("type")
        
        if username is None or token_type != "refresh":
            raise HTTPException(status_code=401, detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh token")
        
        db = SessionLocal()
        user = db.query(User).filter(User.username == username).first()
        db.close()
        
        if not user:
            raise HTTPException(status_code=401, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
        access_token = create_token(
            data={"sub": user.username, "type": "access"}, 
            expires_delta=access_token_expires
        )
        
        refresh_token_expires = timedelta(days=REFRESH_TOKEN_EXPIRE_DAYS)
        new_refresh_token = create_token(
            data={"sub": user.username, "type": "refresh"}, 
            expires_delta=refresh_token_expires
        )
        
        return {
            "access_token": access_token,
            "token_type": "bearer",
            "refresh_token": new_refresh_token
        }
        
    except jwt.PyJWTError:
        raise HTTPException(
            status_code=401,
            detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh token",
            headers={"WWW-Authenticate": "Bearer"},
        )

async def get_current_user(request: Request, token: str = Depends(oauth2_scheme)):
    """
    –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, —Ä–∞–±–æ—Ç–∞—é—â–∞—è –∫–∞–∫ —Å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º–∏ –∫—É–∫–∞–º–∏, —Ç–∞–∫ –∏ —Å OAuth2 —Ç–æ–∫–µ–Ω–∞–º–∏.
    """
    user = request.session.get("user")
    
    if not user and token:
        try:
            payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
            username = payload.get("sub")
            token_type = payload.get("type")
            
            if username is None or token_type != "access":
                raise HTTPException(status_code=401, detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
            
            db = SessionLocal()
            user = db.query(User).filter(User.username == username).first()
            db.close()
            
            if not user:
                raise HTTPException(status_code=401, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            return user.username
            
        except Exception as e: 
            print(f"–û—à–∏–±–∫–∞ JWT: {str(e)}")
            pass
    
    if not user:
        raise HTTPException(
            status_code=401,
            detail="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    return user

@app.post("/generate", response_model=dict, tags=["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤"])
async def generate(request: RequestModel, user: str = Depends(get_current_user)):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ä—ç–ø-–ø–µ—Å–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.
    
    - **prompt**: –¢–µ–∫—Å—Ç –∏–ª–∏ —Ç–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    
    –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
    """
    result = generate_song(request.prompt)
    return {"lyrics": result}

@app.post("/register", tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"]) 
async def register(username: str = Form(...), password: str = Form(...)):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    - **username**: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - **password**: –ü–∞—Ä–æ–ª—å
    """
    db = SessionLocal()
    existing_user = db.query(User).filter(User.username == username).first()
    if existing_user:
        db.close()
        raise HTTPException(status_code=400, detail="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

    hashed_pw = pwd_context.hash(password)
    new_user = User(username=username, hashed_password=hashed_pw)
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    db.close()

    return JSONResponse(content={"message": "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"})

@app.post("/login", tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
async def login(request: Request, username: str = Form(...), password: str = Form(...)):
    """
    –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É.
    
    - **username**: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - **password**: –ü–∞—Ä–æ–ª—å
    """
    db = SessionLocal()
    user = db.query(User).filter(User.username == username).first()
    db.close()

    if not user or not pwd_context.verify(password, user.hashed_password):
        return JSONResponse(
            status_code=401,
            content={"message": "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å!"}
        )

    request.session["user"] = username
    return JSONResponse(content={"message": "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!"})

@app.post("/logout", tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
async def logout(request: Request):
    """
    –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
    """
    request.session.clear()
    return JSONResponse(content={"message": "üëã –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!"})

@app.get("/protected")
async def protected(user: str = Depends(get_current_user)):
    return {"message": f"üîê –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω, {user}!"}

@app.post("/like", tags=["–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"])
async def like_text(request: LikeTextRequest, user: str = Depends(get_current_user)):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.
    
    - **text**: –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    
    –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
    """
    db = SessionLocal()
    db_user = db.query(User).filter(User.username == user).first()
    if not db_user:
        db.close()
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    liked = LikedText(user_id=db_user.id, text_content=request.text)
    db.add(liked)
    db.commit()
    db.refresh(liked)
    db.close()

    return JSONResponse(content={"message": "‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"})

@app.get("/liked", tags=["–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"])
async def get_liked_texts(user: str = Depends(get_current_user)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    
    –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
    """
    db = SessionLocal()
    db_user = db.query(User).filter(User.username == user).first()
    if not db_user:
        db.close()
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    texts = db.query(LikedText).filter(LikedText.user_id == db_user.id).all()
    db.close()

    return {"liked_texts": [{"id": t.id, "text_content": t.text_content, "created_at": t.created_at} for t in texts]}

@app.get("/generator")
async def generator_page(user: str = Depends(get_current_user)):
    filepath = "static/generator.html"
    if not os.path.exists(filepath):
        raise HTTPException(status_code=404, detail="generator.html –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return FileResponse(filepath)

@app.get("/generate/stream", tags=["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤"])
async def stream_generation(request: Request, prompt: str = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"):
    """
    –ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä—ç–ø-–ø–µ—Å–Ω–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞.
    
    - **prompt**: –¢–µ–∫—Å—Ç –∏–ª–∏ —Ç–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Server-Sent Events (SSE) —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
    """
    async def event_generator():
        steps = [
            "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...",
            "üéµ –ù–∞—à–ª–∏ –ø–æ—Ö–æ–∂–∏–µ —Å—Ç—Ä–æ–∫–∏...",
            "üß† –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ OpenAI...",
            "–ï—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
        ]

        for step in steps:
            if await request.is_disconnected():
                print("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
                break
            yield f"data: {step}\n\n"
            await asyncio.sleep(2)

        try:
            lyrics = generate_song(prompt)
            yield f"data: ‚úÖ –ì–æ—Ç–æ–≤–æ!\n\n"
            await asyncio.sleep(0.5)
            
            payload = json.dumps({"lyrics": lyrics})
            yield f"data: {payload}\n\n"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            error_payload = json.dumps({"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"})
            yield f"data: {error_payload}\n\n"

    return StreamingResponse(event_generator(), media_type="text/event-stream")

@app.get("/favorites")
async def favorites_page(user: str = Depends(get_current_user)):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
    """
    filepath = "static/favorites.html"
    if not os.path.exists(filepath):
        raise HTTPException(status_code=404, detail="favorites.html –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return FileResponse(filepath)