from fastapi import FastAPI, Depends, HTTPException, Form, Request
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, JSONResponse
from starlette.middleware.sessions import SessionMiddleware
from passlib.context import CryptContext
from pydantic import BaseModel
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import FAISS
from langchain_openai import OpenAIEmbeddings
from langchain.docstore.document import Document
from openai import OpenAI
import os
from dotenv import load_dotenv
from models import User
from db import SessionLocal
from models import LikedText
from fastapi.responses import StreamingResponse
import asyncio
import time  
import json

load_dotenv()
openai_key = os.getenv("OPENAI_API_KEY")

if not openai_key:
    raise ValueError("‚ùå API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª!")

print(f"‚úÖ API-–∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: {openai_key[:5]}...")

app = FastAPI(
    title="–†—ç–ø –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä API",
    description="API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤ —Ä—ç–ø-–ø–µ—Å–µ–Ω –≤ —Å—Ç–∏–ª–µ –°–ª–∞–≤—ã –ö–ü–°–° —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GPT-4",
    version="1.0.0",
    docs_url="/docs",  
    redoc_url="/redoc", 
    openapi_tags=[
        {
            "name": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤",
            "description": "–û–ø–µ—Ä–∞—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–æ–≤ —Ä—ç–ø–∞",
        },
        {
            "name": "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        },
        {
            "name": "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
            "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏",
        },
    ] 
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://127.0.0.1:5500", "http://localhost:5500", "*"],  
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°–µ—Å—Å–∏–∏ cookies
app.add_middleware(SessionMiddleware, secret_key="supersecretkey")
app.mount("/static", StaticFiles(directory="static"), name="static")

@app.get("/")
async def serve_frontend():
    return FileResponse("static/index.html")

INDEX_PATH = "faiss_index"
with open("all_songs.txt", "r", encoding="utf-8") as f:
    raw_text = f.read()

songs = [song.strip() for song in raw_text.split("\n\n") if song.strip()]
print(f"üéµ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(songs)} –ø–µ—Å–µ–Ω!")

client = OpenAI(
    api_key=openai_key,
    base_url="https://api.vsegpt.ru/v1",
)

def load_or_create_index(texts, index_path):
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    index_dir = os.path.dirname(index_path)
    if index_dir and not os.path.exists(index_dir):
        os.makedirs(index_dir)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {index_dir}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑
    embedding_model = OpenAIEmbeddings(
        model="text-embedding-3-small",
        openai_api_key=openai_key,
        openai_api_base="https://api.vsegpt.ru/v1",
    )
    
    if os.path.exists(index_path):
        try:
            print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π FAISS-–∏–Ω–¥–µ–∫—Å...")
            db = FAISS.load_local(index_path, embedding_model, allow_dangerous_deserialization=True)
            print("‚úÖ FAISS-–∏–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            return db
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω–¥–µ–∫—Å–∞: {e}")
            print("üîÑ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –≤–∑–∞–º–µ–Ω...")
            # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    else:
        print("üöÄ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π FAISS-–∏–Ω–¥–µ–∫—Å...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    try:
        splitter = RecursiveCharacterTextSplitter(separators=['\n\n', '\n', ' '], chunk_size=512, chunk_overlap=200)
        
        if not texts:
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø–µ—Ä–µ–¥–∞–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤")
            # –°–æ–∑–¥–∞–¥–∏–º –ø—É—Å—Ç–æ–π –∏–Ω–¥–µ–∫—Å
            empty_chunk = Document(page_content="", metadata={'chunkID': 0})
            db = FAISS.from_documents([empty_chunk], embedding_model)
        else:
            source_chunks = [
                Document(page_content=chunk, metadata={'chunkID': i})
                for i, chunk in enumerate(splitter.split_text("\n\n".join(texts)))
            ]
            
            if not source_chunks:
                print("‚ö†Ô∏è –ü–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞")
                empty_chunk = Document(page_content="", metadata={'chunkID': 0})
                db = FAISS.from_documents([empty_chunk], embedding_model)
            else:
                print(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(source_chunks)} —á–∞–Ω–∫–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
                db = FAISS.from_documents(source_chunks, embedding_model)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
        try:
            db.save_local(index_path)
            print("üíæ FAISS-–∏–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞: {e}")
        
        return db
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞: {e}")
        raise

knowledge_base_index = load_or_create_index(songs, INDEX_PATH)

# –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞
class RequestModel(BaseModel):
    prompt: str

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
users_db = {
    "admin": pwd_context.hash("yoyo")
}

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token", auto_error=False)

@app.post("/token", tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–≤–∞–≥–µ—Ä–µ).
    """
    db = SessionLocal()
    user = db.query(User).filter(User.username == form_data.username).first()
    db.close()
    
    if not user or not pwd_context.verify(form_data.password, user.hashed_password):
        raise HTTPException(
            status_code=401,
            detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    return {"access_token": user.username, "token_type": "bearer"}

async def get_current_user(request: Request, token: str = Depends(oauth2_scheme)):
    """
    Combined authentication that works with both session cookies and OAuth2 tokens.
    """
    # First try session-based auth (for browser)
    user = request.session.get("user")
    
    # If no user in session but we have a token, use it (for API/Swagger)
    if not user and token:
        user = token
        
    if not user:
        raise HTTPException(
            status_code=401,
            detail="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return user

def generate_song(prompt: str):
    try:
        docs = knowledge_base_index.similarity_search(prompt, k=3) if knowledge_base_index else []
        similar_texts = [doc.page_content for doc in docs] if docs else ["–ë–∞–∑–∞ –ø—É—Å—Ç–∞, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –∫—É–ø–ª–µ—Ç!"]

        context = "\n".join(similar_texts)
        messages = [
            {"role": "system", "content": "–¢—ã —Ä—ç–ø–µ—Ä –°–ª–∞–≤–∞ –ö–ü–°–°. –ü–∏—à–∏ —Ä–µ–ø –≤ –µ–≥–æ —Å—Ç–∏–ª–µ, –≤–∞–∂–Ω—ã —Ä–∏—Ñ–º—ã"},
            {"role": "user", "content": f"–í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–æ–∫:\n{context}\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ–¥–æ–ª–∂–∏: {prompt}"}
        ]

        completion = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=messages,
            temperature=0.8
        )

        return completion.choices[0].message.content
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

@app.post("/generate", response_model=dict, tags=["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤"])
async def generate(request: RequestModel, user: str = Depends(get_current_user)):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ä—ç–ø-–ø–µ—Å–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.
    
    - **prompt**: –¢–µ–∫—Å—Ç –∏–ª–∏ —Ç–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    
    –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
    """
    result = generate_song(request.prompt)
    return {"lyrics": result}

# Swagger: —Ç–µ–≥–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
@app.post("/register", tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"]) 
async def register(username: str = Form(...), password: str = Form(...)):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    - **username**: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - **password**: –ü–∞—Ä–æ–ª—å
    """
    db = SessionLocal()
    existing_user = db.query(User).filter(User.username == username).first()
    if existing_user:
        db.close()
        raise HTTPException(status_code=400, detail="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

    hashed_pw = pwd_context.hash(password)
    new_user = User(username=username, hashed_password=hashed_pw)
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    db.close()

    return JSONResponse(content={"message": "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"})


@app.post("/login", tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
async def login(request: Request, username: str = Form(...), password: str = Form(...)):
    """
    –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É.
    
    - **username**: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - **password**: –ü–∞—Ä–æ–ª—å
    """
    db = SessionLocal()
    user = db.query(User).filter(User.username == username).first()
    db.close()

    if not user or not pwd_context.verify(password, user.hashed_password):
        return JSONResponse(
            status_code=401,
            content={"message": "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å!"}
        )

    request.session["user"] = username
    return JSONResponse(content={"message": "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!"})


@app.post("/logout", tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
async def logout(request: Request):
    """
    –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
    """
    request.session.clear()
    return JSONResponse(content={"message": "üëã –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!"})

@app.get("/protected")
async def protected(user: str = Depends(get_current_user)):
    return {"message": f"üîê –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω, {user}!"}

# –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ª–∞–π–∫–∞
class LikeTextRequest(BaseModel):
    text: str

@app.post("/like", tags=["–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"])
async def like_text(request: LikeTextRequest, user: str = Depends(get_current_user)):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.
    
    - **text**: –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    
    –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
    """
    db = SessionLocal()
    db_user = db.query(User).filter(User.username == user).first()
    if not db_user:
        db.close()
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    liked = LikedText(user_id=db_user.id, text_content=request.text)
    db.add(liked)
    db.commit()
    db.refresh(liked)
    db.close()

    return JSONResponse(content={"message": "‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"})

@app.get("/liked", tags=["–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"])
async def get_liked_texts(user: str = Depends(get_current_user)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    
    –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
    """
    db = SessionLocal()
    db_user = db.query(User).filter(User.username == user).first()
    if not db_user:
        db.close()
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    texts = db.query(LikedText).filter(LikedText.user_id == db_user.id).all()
    db.close()

    return {"liked_texts": [{"id": t.id, "text_content": t.text_content, "created_at": t.created_at} for t in texts]}

# --- –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ ---
@app.get("/generator")
async def generator_page(user: str = Depends(get_current_user)):
    filepath = "static/generator.html"
    if not os.path.exists(filepath):
        raise HTTPException(status_code=404, detail="generator.html –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return FileResponse(filepath)

# Swagger
@app.get("/generate/stream", tags=["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤"])
async def stream_generation(request: Request, prompt: str = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"):
    """
    –ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä—ç–ø-–ø–µ—Å–Ω–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞.
    
    - **prompt**: –¢–µ–∫—Å—Ç –∏–ª–∏ —Ç–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Server-Sent Events (SSE) —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
    """
    print(f"‚≠ê –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å SSE —Å prompt: {prompt}")
    async def event_generator():
        steps = [
            "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...",
            "üéµ –ù–∞—à–ª–∏ –ø–æ—Ö–æ–∂–∏–µ —Å—Ç—Ä–æ–∫–∏...",
            "üß† –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ OpenAI...",
            "–ï—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
        ]

        for step in steps:
            if await request.is_disconnected():
                print("‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
                break
            yield f"data: {step}\n\n"
            await asyncio.sleep(2)

        try:
            lyrics = generate_song(prompt)
            yield f"data: ‚úÖ –ì–æ—Ç–æ–≤–æ!\n\n"
            await asyncio.sleep(0.5)
            
            payload = json.dumps({"lyrics": lyrics})
            yield f"data: {payload}\n\n"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            error_payload = json.dumps({"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"})
            yield f"data: {error_payload}\n\n"

    return StreamingResponse(event_generator(), media_type="text/event-stream")